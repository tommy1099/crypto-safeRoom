# DO NOT REMOVE. CLOUDLINUX PASSENGER CONFIGURATION BEGIN
PassengerAppRoot "/home/csrbacke/backend"
PassengerBaseURI "/"
PassengerNodejs "/home/csrbacke/nodevenv/backend/14/bin/node"
PassengerAppType node
PassengerStartupFile app.js
# DO NOT REMOVE. CLOUDLINUX PASSENGER CONFIGURATION END




import { useEffect } from "react";
import { RxCross2 } from "react-icons/rx";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../../../Store/Store";
import { fullScreenToggle } from "../../../Store/IsFullScreen";
import { Button } from "../../ui";
import { addItem } from "../../../Store/CartListReducer";

import { formatNumberToPersian } from "../../../utils/NumberToFarsi/NumberToFarsi";
// const dispatch = useDispatch();
import { useTranslation } from "react-i18next";
import { CardProps } from "../../../Interfaces/Interfaces";

// interface Props extends PropsWithChildren {
//   id: string;
//   type?: string;
//   showModal?: boolean;
//   handleClose?: () => void;
//   price?: number;
//   img?: string;
//   desc?: {
//     desc1: string;
//     desc2?: string;
//     desc3?: string;
//   };
//   tags?: {
//     tag1: string;
//     tag2?: string;
//   };
//   crypto?: string;
//   title?: string;
// }

const Modal = ({
  tpPrices,
  entryPoint,
  alertDesc,
  children,
  price,
  id,
  type,
  showModal,
  handleClose,
  img,
  desc,
  tags,
  crypto,
  title,
}: CardProps) => {
  // const [isLoaded, setIsLoaded] = useState(false);
  const { t } = useTranslation();
  // const user = useSelector((state: RootState) => state.user);

  const shouldFormatNumbers = type === "signals";
  const isFa = useSelector((state: RootState) => state.lang.isFa);

  // const handleImageLoad = () => {
  //   setIsLoaded(true);
  // };

  const dispatch = useDispatch();
  const isFullscreen = useSelector(
    (state: RootState) => state.FullScreenToggleReducer.fullScreen
  );

  const handleImageClick = () => {
    dispatch(fullScreenToggle());
  };

  useEffect(() => {
    const handleOuterClick = (event: MouseEvent) => {
      const outerElement = document.querySelector("#inner") as HTMLDivElement;

      if (outerElement.contains(event.target as Node)) {
        event.stopPropagation();
      } else {
        if (handleClose !== undefined) handleClose();
      }
    };

    const handleCrossClick = (event: MouseEvent) => {
      const outerElement = document.querySelector("#cross") as HTMLDivElement;

      if (outerElement.contains(event.target as Node)) {
        if (handleClose !== undefined) handleClose();
      }
    };

    if (showModal) {
      document.addEventListener("mousedown", handleOuterClick);
      document.addEventListener("mousedown", handleCrossClick);
    } else {
      document.removeEventListener("mousedown", handleOuterClick);
      document.removeEventListener("mousedown", handleCrossClick);
    }

    return () => {
      document.removeEventListener("mousedown", handleOuterClick);
      document.removeEventListener("mousedown", handleCrossClick);
    };
  }, [handleClose, showModal]);
  const handleAddToCart = () => {
    if (title && img && id && price)
      dispatch(
        addItem({ id, title, img, quantity: 0, price: price, physical: false })
      );
  };
  return (
    <>
      {showModal && (
        <div
          key={id}
          id={id}
          className="flex fixed inset-0 z-10 justify-center items-center w-full h-full bg-black bg-opacity-50"
        >
          <div
            id="inner"
            className={`bg-base-100 p-6 rounded-lg shadow-lg${
              type === "products" &&
              "w-[90%] h-[85%] lg:mt-[8%] lg:w-[80%] lg:h-[80%] overflow-y-auto"
            } ${type === "signals" && "lg:w-[40%] lg:mt-[0%] mt-[8%]"}
              ${type === "news" && "w-[80%] h-[80%] overflow-y-auto"}
            `}
          >
            <div className="flex justify-between mb-5">
              <h2
                className={`${
                  type === "signals"
                    ? "text-5xl rounded-full w-[130px] p-3 font-bold"
                    : ""
                } ${
                  type === "news"
                    ? "text-3xl w-full p-3 font-bold border-l-8 rounded-lg border-patternColors-red"
                    : ""
                }`}
              >
                {type === "signals" && children && (
                  <div className="flex flex-col gap-1">
                    <p className="text-4xl">{crypto}</p>
                    <div className="text-xl">{children}</div>
                  </div>
                )}
                {type !== "signals" && (
                  <p className="text-3xl text-neutral">{title}</p>
                )}
              </h2>
              <div
                id="cross"
                className="flex w-[40px] mt-1 h-[40px] text-2xl p-2 bg-primary text-secondary rounded-full cursor-pointer"
              >
                <RxCross2 />
              </div>
            </div>
            <div className="">
              {/* {!isLoaded ? <Loading /> : <></>} */}
              {type === "signals" && (
                <img
                  className={`w-full h-64 object-cover mb-4 cursor-pointer ${
                    isFullscreen
                      ? "fixed z-[20] lg:top-[9%] lg:left-[5%] w-full h-[30%] left-[0%] top-[35%] lg:w-[90%] lg:h-[90%]"
                      : ""
                  }`}
                  src={img}
                  onClick={handleImageClick}
                  // onLoad={handleImageLoad}
                />
              )}

              {type === "news" && (
                <img
                  className="w-full h-[200px] object-cover"
                  src={img}
                  alt={title}
                />
              )}
              {type !== "news" && type !== "signals" && (
                <div className="xl:flex">
                  <img
                    className="w-[400px] h-[400px] object-cover "
                    src={img}
                    alt={title}
                  />
                  {desc && <p className="p-5 text-neutral">{desc.desc1}</p>}
                  {desc && <p className="text-neutral">{desc.desc2}</p>}
                  {desc && <p className="text-neutral">{desc.desc3}</p>}
                </div>
              )}
            </div>
            <div className="my-5">
              {type === "news" && <p className="mb-4">{desc && desc.desc1}</p>}
              {type === "signals" && desc !== undefined && (
                <div>
                  <div className="flex justify-center items-center p-2">
                    <div className="flex gap-1 p-2 shadow stats">
                      <p className="text-neutral">{t("entryPoint")}:</p>
                      <p className="border-none text-neutral">
                        {entryPoint === ""
                          ? t("now")
                          : isFa
                          ? formatNumberToPersian(Number(entryPoint))
                          : entryPoint}
                      </p>
                    </div>
                  </div>
                  <div className="flex justify-center items-center p-1">
                    <div className="shadow stats">
                      <div className="flex justify-center items-center stat">
                        <p className="text-sm text-neutral">
                          {t("tp1")}%
                          {shouldFormatNumbers
                            ? isFa
                              ? formatNumberToPersian(Number(desc.desc1))
                              : desc.desc1
                            : desc.desc1}
                        </p>
                      </div>

                      <div className="flex justify-center items-center stat">
                        <p className="text-sm text-neutral">
                          {t("tp2")}%
                          {shouldFormatNumbers
                            ? isFa
                              ? formatNumberToPersian(Number(desc.desc2))
                              : desc.desc2
                            : desc.desc2}
                        </p>
                      </div>

                      <div className="flex justify-center items-center stat">
                        <p className="text-sm text-neutral">
                          {t("tp3")}%
                          {shouldFormatNumbers
                            ? isFa
                              ? formatNumberToPersian(Number(desc.desc3))
                              : desc.desc3
                            : desc.desc3}
                        </p>
                      </div>
                    </div>
                  </div>
                  <div className="flex justify-center items-center p-1">
                    <div className="shadow stats">
                      <div className="flex justify-center items-center stat">
                        <p className="text-sm text-neutral">
                          {t("tp1Price")}
                          {": "}
                          {shouldFormatNumbers
                            ? isFa
                              ? formatNumberToPersian(
                                  Number(tpPrices?.tp1Price)
                                )
                              : tpPrices?.tp1Price
                            : tpPrices?.tp1Price}
                        </p>
                      </div>

                      <div className="flex justify-center items-center stat">
                        <p className="text-sm text-neutral">
                          {t("tp2Price")}
                          {": "}
                          {shouldFormatNumbers
                            ? isFa
                              ? formatNumberToPersian(
                                  Number(tpPrices?.tp2Price)
                                )
                              : tpPrices?.tp2Price
                            : tpPrices?.tp2Price}
                        </p>
                      </div>

                      <div className="flex justify-center items-center stat">
                        <p className="text-sm text-neutral">
                          {t("tp3Price")}
                          {": "}
                          {shouldFormatNumbers
                            ? isFa
                              ? formatNumberToPersian(
                                  Number(tpPrices?.tp3Price)
                                )
                              : tpPrices?.tp3Price
                            : tpPrices?.tp3Price}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="flex justify-center items-center mt-2 space-x-2">
              {tags && (
                <div className="flex text-xl">
                  <div className="shadow stats">
                    <div className="flex justify-center items-center text-sm stat">
                      <div className="stat-title">{t("stop")}%</div>
                      <p className="text-neutral">
                        {shouldFormatNumbers
                          ? isFa
                            ? formatNumberToPersian(Number(tags.tag1))
                            : tags.tag1
                          : tags.tag1}
                        %
                      </p>
                    </div>
                  </div>
                </div>
              )}
              {tags && (
                <div className="flex text-xl">
                  <div className="shadow stats">
                    <div className="flex justify-center items-center text-sm stat">
                      <div className="stat-title">{t("sl")}</div>
                      <p className="text-neutral">
                        {shouldFormatNumbers && tags.tag2}
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div className="flex justify-center items-center p-2">
              <div className="flex gap-1 p-2 shadow stats">
                <p className="text-neutral">{t("alertDesc")}:</p>
                <p className="border-none text-neutral">{alertDesc}</p>
              </div>
            </div>
            {type !== "signals" && type !== "news" && (
              <div>
                {price && (
                  <div className="mt-10 text-xl font-bold">{price}$</div>
                )}

                <Button
                  onClick={handleAddToCart}
                  style="p-3 bg-neutral rounded-md my-10 text-white"
                >
                  Add to cart
                </Button>
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
};

export default Modal;










import { Container } from "..";
import { NavBar, Footer, PaginationButtons } from "../../components/ui";
import Card from "../../components/forms/Cards/Card"; //change
import { ScrollToTopIcon } from "../../components/forms";
import { useDispatch } from "react-redux";
import { resetSignals, setSignals } from "../../Store/SignalsReducer";
import { Slide } from "../../components/ui";
import { useSelector } from "react-redux";
import { RootState } from "../../Store/Store";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
import RefreshToken from "../../utils/RefreshToken/RefreshToken";
import { BackendAddress } from "../../utils/BackendAddress/BackendAddress";
import { useTranslation } from "react-i18next";
import {
  togglesignalIndicatorFalse,
  togglesignalIndicatorTrue,
} from "../../Store/signalIndicator";
import { useLocation, useNavigate } from "react-router-dom";
import { LiveChat } from "../../components/Features";
// import StatsVisualizer from "../../components/forms/StatsVisualizer/StatsVisualizer";

const Signals = () => {
  const isFa = useSelector((state: RootState) => state.lang.isFa);
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  const isDarkTheme = useSelector((state: RootState) => state.themeToggle.Dark);

  const signalsList = useSelector((state: RootState) => state.signals.signals);
  // console.log("signalsList:", signalsList);
  const toggle = useSelector((state: RootState) => state.toggleReducer.switch);
  const filteredComponents = signalsList.filter((component) =>
    toggle ? true : component.blur === toggle
  );
  const [currentPage, setCurrentPage] = useState(1);
  const incPage = () => {
    setCurrentPage((prev) => prev + 1);
  };
  const decPage = () => {
    if (currentPage > 0) setCurrentPage((prev) => prev - 1);
  };
  useEffect(() => {
    const accessToken = Cookies.get("accessToken");
    if (accessToken === undefined) {
      RefreshToken(navigate, location, dispatch);
    }
    const fetchData = async () => {
      try {
        const response = await fetch(`${BackendAddress()}/signals`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        });
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        dispatch(resetSignals());
        dispatch(setSignals(data));
      } catch (error: unknown) {
        if (error instanceof Error) {
          console.error("Error during fetch request:", error.message);
        } else {
          console.error("Unknown error during fetch request:", error);
        }
      }
    };

    fetchData();

    // Use setInterval to fetch data every 10 seconds (optional)
    const intervalId = setInterval(fetchData, 10000);

    return () => {
      clearInterval(intervalId);
    };
  }, [dispatch]);

  useEffect(() => {
    filteredComponents.filter((component) => !component.blur).length === 0
      ? dispatch(togglesignalIndicatorFalse())
      : dispatch(togglesignalIndicatorTrue());
  }, [dispatch, filteredComponents]);
  return (
    <div className="">
      <NavBar />

      <div className="flex  mr-[4%] justify-center items-center gap-5">
        <div className="mt-[20%] hidden md:flex sm:mt-[15%] lg:mt-[10%] xl:mt-[7%]">
          {" "}
          <Slide type="signals" />
        </div>
      </div>
      <a
        dir={`${isFa ? "rtl" : "ltr"}`}
        className="flex text-neutral text-3xl mx-[5%] mt-[15%] sm:mt-[15%] md:mt-[4%] lg:mt-[1%]"
      >
        {t("newSignals")}
      </a>

      <Container
        dir={`${isFa ? "rtl" : "ltr"}`}
        style={`relative mt-[60px] z-1 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 xl:grid-cols-7 mx-[5%] ${
          isDarkTheme ? "border-neutral" : ""
        } border-b-2 pb-10 align-bottom`}
      >
        {filteredComponents
          .filter((component) => !component.blur)
          .map((component, index) => (
            <Card
              handleClose={() => {}}
              alertDesc={component.alertDesc}
              entryPoint={component.entryPoint}
              tpPrices={component.tpPrices}
              physical={false}
              key={index.toString()} // Add a unique key prop
              type="signals"
              tp={component.tp}
              state={component.state}
              blur={component.blur}
              id={component.id}
              vip={component.vip}
              img={component.img}
              crypto={component.crypto}
              desc={component.desc}
              tags={component.tags}
            />
          ))}
      </Container>
      <a
        dir={`${isFa ? "rtl" : "ltr"}`}
        className="flex text-neutral text-3xl mx-[5%] mt-[2%]"
      >
        {t("oldSignals")}
      </a>
      <Container
        dir={`${isFa ? "rtl" : "ltr"}`}
        style="relative mb-[50px] z-1 lg:mb-[100px] mt-[60px] grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 xl:grid-cols-7 mx-[5%] "
      >
        {filteredComponents
          .filter((component) => component.blur)
          .map((component, index) => (
            <Card
              handleClose={() => {}}
              physical={false}
              key={index.toString()} // Add a unique key prop
              type="signals"
              tp={component.tp}
              state={component.state}
              blur={component.blur}
              id={component.id}
              vip={component.vip}
              img={component.img}
              crypto={component.crypto}
              desc={component.desc}
              tags={component.tags}
            />
          ))}
      </Container>
      <div className="flex justify-center items-center mt-[-5%] mb-[2%] z-[3]">
        <PaginationButtons
          incPage={incPage}
          decPage={decPage}
          currentPage={currentPage}
        />
      </div>
      <div>
        <LiveChat />
      </div>
      <div className="">
        <Footer />
      </div>
      <div className="fixed left-0 top-[90%] m-5 ">
        <ScrollToTopIcon />
      </div>
    </div>
  );
};
export default Signals;
